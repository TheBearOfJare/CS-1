import java.util.*; import java.io.BufferedReader; import java.io.FileNotFoundException; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.io.UnsupportedEncodingException; import java.math.BigDecimal; import java.math.MathContext; public class PI_DAY_FINAL  { static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)); public static void save(BigDecimal output, String name) throws FileNotFoundException, UnsupportedEncodingException { PrintWriter writer = new PrintWriter(name, "UTF-8"); writer.write(output.toPlainString()); writer.close(); } public static List<BigDecimal> chudnovskify (BigDecimal a, BigDecimal b, MathContext depth) { if (b.compareTo(a.add(BigDecimal.valueOf(1))) != 0) { double da = a.doubleValue(); double db = b.doubleValue(); BigDecimal m = BigDecimal.valueOf(Math.floor((da+db)/2)); List<BigDecimal> a_set = chudnovskify(a, m, depth); List<BigDecimal> b_set = chudnovskify(m, b, depth); BigDecimal Pab = null; BigDecimal Qab = null; BigDecimal Rab = null; try { long Paml = a_set.get(0).longValueExact(); long Pmbl = b_set.get(0).longValueExact(); Pab = BigDecimal.valueOf(Paml*Pmbl).round(depth); } catch (Exception e) { BigDecimal Pam = a_set.get(0); BigDecimal Pmb = b_set.get(0); Pab = Pam.multiply(Pmb, depth); } try { long Qaml = a_set.get(1).longValueExact(); long Qmbl = b_set.get(1).longValueExact(); Qab = BigDecimal.valueOf(Qaml*Qmbl).round(depth); if (Qab.compareTo(BigDecimal.valueOf(0)) == 0) { throw new Exception("too big"); } } catch (Exception e) { BigDecimal Qam = a_set.get(1); BigDecimal Qmb = b_set.get(1); Qab = Qam.multiply(Qmb, depth); } try { long Paml = a_set.get(0).longValueExact(); long Qmbl = b_set.get(1).longValueExact(); long Raml = a_set.get(2).longValueExact(); long Rmbl = b_set.get(2).longValueExact(); Rab = BigDecimal.valueOf((long) ((Qmbl*Raml) + (Paml*Rmbl))).round(depth); if (Rab.compareTo(BigDecimal.valueOf(0)) == 0) { throw new Exception("too big"); } } catch (Exception e) { BigDecimal Pam = a_set.get(0); BigDecimal Qmb = b_set.get(1); BigDecimal Ram = a_set.get(2); BigDecimal Rmb = b_set.get(2); Rab = Qmb.multiply(Ram, depth).add(Pam.multiply(Rmb, depth), depth); } List<BigDecimal> output = new ArrayList<>(); output.add(Pab); output.add(Qab); output.add(Rab); return output; } else { BigDecimal Pab = (a.multiply(BigDecimal.valueOf(6), depth).subtract(BigDecimal.valueOf(5), depth)).multiply(a.multiply(BigDecimal.valueOf(2), depth).subtract(BigDecimal.valueOf(1), depth), depth).multiply(a.multiply(BigDecimal.valueOf(6), depth).subtract(BigDecimal.valueOf(1), depth), depth).negate(); BigDecimal Qab = a.pow(3, depth).multiply(BigDecimal.valueOf(10939058860032000l), depth); BigDecimal Rab = Pab.multiply(a.multiply(BigDecimal.valueOf(545140134), depth).add(BigDecimal.valueOf(13591409), depth), depth); List<BigDecimal> output = new ArrayList<>(); output.add(Pab); output.add(Qab); output.add(Rab); return output; } } public static BigDecimal chudnovsky(BigDecimal n, MathContext depth) { List<BigDecimal> chuds = chudnovskify(BigDecimal.valueOf(1), n, depth); BigDecimal Q1n = chuds.get(1); BigDecimal R1n = chuds.get(2); return (BigDecimal.valueOf(426880).multiply(BigDecimal.valueOf(10005).sqrt(depth), depth).multiply(Q1n, depth).divide(Q1n.multiply(BigDecimal.valueOf(13591409), depth).add(R1n, depth), depth)); } public static void main(String[] args) throws IOException { System.out.println("How many million digits?"); String input = reader.readLine(); long start = System.currentTimeMillis(); int mdigits = (int) (Double.parseDouble(input) * 1000000); MathContext depth = new MathContext(mdigits); BigDecimal n = new BigDecimal(mdigits, depth); BigDecimal PI = chudnovsky(n.multiply(BigDecimal.valueOf(1)), depth); System.out.println("Time to calculate: " + (System.currentTimeMillis() - start) + "ms"); start = System.currentTimeMillis(); save(PI, "PI_"+input+"M.txt"); System.out.println("Time to save: " + (System.currentTimeMillis() - start) + "ms"); System.out.println("Finished."); } }